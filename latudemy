--SITUATION--
--We want to send out a promotional email to our existing cutomers--
        SELECT first_name, last_name, email
        FROM customer;

--How many different release_year do we have in the film database--
        SELECT DISTINCT (release_year)
        FROM film;

--How many unique rental rates do we have--
        SELECT DISTINCT (rental_rate)
        FROM film;

--CHALLENGE--
--We want to know what types of ratings we have in the database--
--what ratings do we have availabel?--
          SELECT DISTINCT (rating)
          FROM film;

--How many rows in the payment table--
          SELECT COUNT (*)
          FROM payment;

--How many ratings are there in the film table--
        SELECT COUNT(DISTINCT rating)
        FROM film;

--Want to know if there is a person with the first name is Mary that come to the store--
        SELECT *
        FROM customer
        WHERE first_name = 'Mary';

--Is there any rental rate that higher than $4--
        SELECT *
        FROM film
        WHERE rental_rate > 4;

SELECT *
FROM film
WHERE rental_rate > 4 AND replacement_cost >=15.99 AND rating = 'PG';

--Title of movie with conditions (AND)--
        SELECT title
        FROM film
        WHERE rental_rate > 4 AND replacement_cost >=15.99 AND rating = 'PG';

--Count title of movie with conditions--
        SELECT COUNT (title)
        FROM film
        WHERE rental_rate > 4 AND replacement_cost >=15.99 AND rating = 'PG';

--Title of movie with conditions (OR)--
        SELECT title
        FROM film
        WHERE rating = 'PG' or rating = 'R'

--Movie with the rating not equal to PG--
        SELECT *
        FROM film
        WHERE rating != 'PG'

--CHALLENGE--
-- A cutomer forgot their wallet at our store, so we need to track them down using their email to inform them--
--What is the email for the customer with the name Sharon Robinson?--
        SELECT email
        FROM customer
        WHERE first_name ='Sharon' and Last_name = 'Robinson';

--CHALLENGE--
-- A customer wants to know what the movie "Dragon Squad" is about--
--Could you give them the description for the movie "Dragon Squad" is about?--
        SELECT description
        FROM film
        WHERE title = 'Dragon Squad';

--CHALLENGE--
--A customer is late on their movie return, and we've mailed them a letter to their addresed at '259 Ipoh drive'. We should also called them on the phone them to let them know.--
--Can you get the phone number who lives at '259 Ipoh Drive'?--
        SELECT phone
        FROM address
        WHERE address = '259 Ipoh Drive'

--Order everything based of the order of store_id, first_name, last_name--
        SELECT store_id, first_name, last_name
        FROM customer
        ORDER BY store_id ASC, first_name ASC

--What were the 10 most recent payment based on payment_date--
        SELECT *
        FROM payment
        ORDER BY payment_date ASC
        LIMIT 10;

--What were the 10 most recent payment based on payment_date where there wa a monetory transaction--
        SELECT *
        FROM payment
        WHERE amount != 0.00
        ORDER BY payment_date ASC
        LIMIT 10;

--CHALLENGE--
--We want to rewards our first 10 paying customer--
--What are the customer ids of the first 10 customers who create a payment--
        SELECT customer_id
        FROM payment
        ORDER BY payment_date ASC
        LIMIT 10;

--CHALLENGE--
--A customer wants to quickly rent a video to watch over their short lunch break.--
--What are the title of the 5 shortest (in lenght of runtime) movies?--
        SELECT title, length
        FROM film
        ORDER BY length ASC
        LIMIT 5;

--CHALLENGE--
--If the previous customer can watch any movie that is 50 minute or less in a runtime, how many option does she have?--
        SELECT count (title)
        FROM film
        WHERE length <=50

--The actual amount of payment between 5 and 8 dollar--
        SELECT *
        FROM payment
        WHERE amount BETWEEN 5 and 8;

--How many the amount of payment between 5 and 8 dollar--
        SELECT COUNT (amount)
        FROM payment
        WHERE amount BETWEEN 5 and 8;

--Search actor name by first name (Anne, Carmen, Mena, Penelope)--
        SELECT *
        FROM actor
        WHERE first_name IN ('Anne', 'Carmen', 'Mena', 'Penelope');

--How many actor with the first name (Anne, Carmen, Mena, Penelope)--
        SELECT COUNT (first_name)
        FROM actor
        WHERE first_name IN ('Anne', 'Carmen', 'Mena', 'Penelope');

--Find all the the city that start with the letter B--
        SELECT *
        FROM city
        WHERE city LIKE 'B%'

--Find all the the city that NOT start with the letter B--
        SELECT *
        FROM city
        WHERE city NOT LIKE 'B%'

--CHALLENGE--
--How many payment transaction were greater than 5 dollar?--
        SELECT COUNT (amount)
        FROM payment
        WHERE amount > 5.00;

--CHALLENGE--
--How many actor have a first name with the letter P?--
        SELECT COUNT (actor)
        FROM actor
        WHERE first_name LIKE 'P%';

--CHALLENGE--
--How many unique disrict are our customers from--
        SELECT COUNT (DISTINCT (district))
        FROM address

--CHALLENGE--
--Retrive the list of names for those distinct district from the previous question--
        SELECT DISTINCT district
        FROM address

--CHALLENGE--
--How many films have a rating of R and a replecement cost between 5 and 15 dollar--
        SELECT COUNT (*)
        FROM film
        WHERE rating = 'R' AND replacement_cost BETWEEN 5 AND 15;

--CHALLENGE--
--How many films have the word Truman somewhere in the title--
        SELECT COUNT (title)
        FROM film
        WHERE title LIKE '%Truman%';

--Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.--
        SELECT DISTINCT city
        FROM station
        WHERE MOD (ID,2) = 0

--Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.--
        SELECT COUNT(city) - COUNT(DISTINCT city) 
        FROM station;

--Query the Name of any student in STUDENTS who scored higher than 75 Marks.--
--Order your output by the last three characters of each name.--
--If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.--
        SELECT name
        FROM students
        WHERE marks > 75
        ORDER BY right (name,3), ID ASC;

---Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months.-- 
--Sort your result by ascending employee_id.--
        SELECT name
        FROM employee
        WHERE salary > 2000 AND months < 10
        ORDER BY employee_id ASC;

--Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.--
        SELECT CITY 
        FROM STATION 
        WHERE SUBSTRING(CITY,1,1) 
        IN ('a','e','i','o','u');

--Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE RIGHT (city,1)
        IN ('a','e','i','o','u');

--Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters.--
--Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE RIGHT (city,1) IN ('a','e','i','o','u') and LEFT (city,1) IN ('a','e','i','o','u');

--Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE LEFT (city,1) NOT IN ('a','e','i','o','u');

--Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE RIGHT (city,1) NOT IN ('a','e','i','o','u');

--Query the list of CITY names from STATION that either do not start with vowels OR do not end with vowels. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE left (city,1) NOT IN ('a','e','i','o','u')
        OR right (city,1) NOT IN ('a','e','i','o','u')
        ORDER BY city

--Query the list of CITY names from STATION that do not start with vowels AND do not end with vowels. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE left (city,1) NOT IN ('a','e','i','o','u')
        AND right (city,1) NOT IN ('a','e','i','o','u')
        ORDER BY city;

--Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name).--
--If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.--
        SELECT CITY, LENGTH(CITY)
        FROM STATION
        ORDER BY LENGTH(CITY) ASC, CITY LIMIT 1;
        
        SELECT CITY, LENGTH(CITY)
        FROM STATION
        ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1;

--What the minimum replacement cost in the film table--
        SELECT MIN (replacement_cost)
        FROM film;

--What the most replacement cost in the film table--
        SELECT MAX (replacement_cost)
        FROM film;

--What is the AVG replacement cost in the film table--
        SELECT avg (replacement_cost)
        FROM film;

--Cuman mau 2 desimal--
        SELECT ROUND (AVG (replacement_cost),2) 
        FROM film

--The store has to replace every single film, so  we were going to figure out the total replacement cost--
        SELECT SUM (replacement_cost)
        FROM film;

--What customer spending the most money in total--
        SELECT customer_id, SUM (amount)
        FROM payment
        GROUP BY customer_id
        ORDER BY SUM(amount);

--How many trascation that the customer having--
        SELECT customer_id, COUNT (amount)
        FROM payment
        GROUP BY customer_id
        ORDER BY COUNT(amount);

--Group BY customer_id and staff_id--
        SELECT customer_id, staff_id, SUM(amount)
        FROM payment
        GROUP BY customer_id, staff_id
        ORDER BY customer_id ASC;

--Gruop BY a date column and a total of sales--
        SELECT DATE (payment_date), SUM(amount)
        FROM payment
        GROUP BY DATE (payment_date)
        ORDER BY SUM(amount);

--CHALLENGE--
--We have two staff members, with staff IDS 1 and 2. We want to give a bonus to staff member that handle the most payments. (most in terms of number of payments proceeds, not the total dollars)--
--How many payments did each staff member handled and who got the bonus?--
        SELECT staff_id, COUNT (amount)
        FROM payment
        Group BY staff_id;

--CHALLENGE--
--Corporate HQ is conducting a study on relationship between replacement cost and a movie MPAA rating (e.g. G, PG, R, etc..)--
--What is the average replacement cost per  MPAA rating--
        SELECT rating, AVG (replacement_cost)
        FROM film
        GROUP BY rating;

--CHALLENGE--
--We are having a promotion to reward our top 5 customers with coupons.--
--What are the customers ids of the top 5 customers by total spend?--
        SELECT customer_id, SUM (amount)
        FROM payment
        GROUP BY customer_id
        ORDER BY SUM(amount) DESC
        LIMIT 5;

--Total SUM amount per customer pake HAVING--
        SELECT customer_id, SUM (amount)
        FROM payment
        GROUP BY customer_id
        HAVING SUM(amount) > 100.00;

--Number of customer per store--
        SELECT store_id, COUNT(customer_id)
        FROM customer
        GROUP BY store_id
        HAVING COUNT (customer_id) > 300;

--CHALLENGES--
--We are launching a platinum service for our most loyal customers. We will assign a platinum status to customers taht have had 40 or more transcation payment.--
--What customer_id are eligible for platinum status--
        SELECT customer_id, COUNT (amount)
        FROM payment
        GROUP BY customer_id
        HAVING COUNT (amount)>= 40;

--CHALLENGES--
--What are the customers ids of customers who has spent more than 100 dollar in our trasaction with our staff id member number 2--
        SELECT customer_id, SUM (amount)
        FROM payment
        WHERE staff_id = 2
        GROUP BY customer_id
        HAVING SUM(amount) > 100;

--ASSESMENT--
-- Return the customer IDs of customers who have spent at least $110 with the staff member who has an ID of 2.--
        SELECT customer_id, SUM(amount)
        FROM payment
        WHERE staff_id = 2
        GROUP BY customer_id
        HAVING SUM(amount) >=110

--ASSESMENT-
--How many films begin with the letter J?--
        SELECT COUNT(*)
        FROM film
        WHERE "title" LIKE 'J%'

--ASSESMENT--
-- What customer has the highest customer ID number whose name starts with an 'E' and has an address ID lower than 500?--
        SELECT first_name, last_name
        FROM customer
        WHERE "first_name" LIKE 'E%' AND address_id < 500
        ORDER BY customer_id DESC
        LIMIT 1;

--Change the column ouput using AS statement--
        SELECT COUNT (amount) AS num_transaction
        FROM payment;

        SELECT customer_id, SUM(amount) AS total_spent
        FROM payment
        GROUP BY customer_id;

        SELECT customer_id, SUM(amount) AS total_spent
        FROM payment
        GROUP BY customer_id
        HAVING SUM(amount) > 100

--We want to search customer email associted with specific payment--
        SELECT payment_id, payment.customer_id,email
        FROM payment
        INNER JOIN customer
        ON payment.customer_id = customer.customer_id;

--New privacy rule are being implemented and we want to make sure we dont have any payment information thats not attached to customers or that we dont have customers informations taht isnt atttach to payment--
--We want to make sure all the payments we have is associated with the current customers and all customers we have associated with some historical payment--
        SELECT *
        FROM customer
        FULL OUTER JOIN payment
        ON customer.customer_id = payment.customer_id
        WHERE customer.customer_id IS null
        OR payment.payment_id IS null

--Short film id and title that is not in the inventory table using LEFT OUTER JOIN--
        SELECT film.film_id, title, inventory_id
        FROM film
        LEFT JOIN inventory
        ON inventory.film_id = film.film_id
        WHERE inventory.film_id IS null;

--CHALLENGE--
--California sales tax laws have changed and we need to alert our customers to this through email--
--What are emails of customers who lived in california?--
        SELECT district, email 
        FROM address
        INNER JOIN customer
        ON address.address_id = customer.address_id
        WHERE district = 'California'

--CHALLENGE--
--Customer walking and is the huge fan of the actor "Nick Wahlberg" and wants to know which movies he is in.--
--Get a list of all movies "Nick Whalberg" has been in (pake MULTIPLE JOIN)--
        SELECT title, first_name, last_name
        FROM film_actor
        INNER JOIN actor
        ON film_actor.actor_id = actor.actor_id
        INNER JOIN film
        ON film_actor.film_id = film.film_id
        WHERE first_name ='Nick' AND 
        last_name = 'Wahlberg'

--Show time zone in your computer--
        SHOW TIMEZONE

--Show timestamp and timezone right now--
        SELECT NOW()

----Show timestamp and timezone as a STRING--
        SELECT TIMEOFDAY()

--Show current time--
        SELECT CURRENT_TIME

--Company whant to update plankton data by adding hourly pay and hire date--
        UPDATE employees
        SET hire_date = '2023-06-07',
            hourly_pay = '10.25'
        WHERE employee_id = 6;

--The company want to insert new product but the product name cannot be the same--
        CREATE TABLE produtcs (
        	product_ID INT
        	product_name VARCHAR (25) UNIQUE
        	price DECIMAL (4,2)
        
        );

--Company want to know the year on the payment date--
        SELECT EXTRACT (YEAR FROM payment_date)
        FROM payment;
        
--Company want to know the month on the payment date--
        SELECT EXTRACT (MONTH FROM payment_date)
        FROM payment;

--the manager want to know how old the payment date from the current date--
        SELECT AGE (payment_date)
        FROM payment;

--The manager want to know the date on the payment date with his specifict requirement--
        SELECT TO_CHAR (payment_date, 'MM-DD-YY')
        FROM payment;

        SELECT TO_CHAR (payment_date, 'MONTH-YYYY')
        FROM payment;

--CHALLENGE--
--During wich month did the payments occur?--
--Format your answer to return back to the full month name--
        SELECT DISTINCT (TO_CHAR (payment_date, 'MONTH'))
        FROM payment;

--CHALLENGE--
-- How many payments occur on mondays--
         SELECT COUNT (*) 
         FROM payment
         WHERE (TO_CHAR (payment_date, 'FMDay')) = 'Monday';

         SELECT COUNT (*)
         FROM payment
         WHERE EXTRACT (dow FROM payment_date) = 1;

--The manager want to know the percentage between rental rate and replacement cost--
        SELECT ROUND (rental_rate/replacement_cost,2) * 100 AS percentage_cost
        FROM film;

--search length of customer first name--
        SELECT LENGTH (first_name)
        FROM customer;

--combine first name and last name into full name--
        SELECT first_name || ' ' || last_name AS full_name
        FROM customer;

--with uppercase--
        SELECT Upper(first_name) || ' ' || Upper (last_name) AS full_name
        FROM customer;

--We want to add custom email to our table--
        SELECT first_name || last_name || '@gmail.com'
        FROM customer

-- and then make the text lower case using LEFT and LOWER functions--
        SELECT LOWER (LEFT (first_name,1)) || LOWER (last_name) || '@gmail.com' AS custom_email
        FROM customer;

-- find the movie that have the higher rental rate than the AVG rental rate (using SUBQUERY)--
        SELECT title, rental_rate
        FROM film
        WHERE rental_rate > (SELECT AVG (rental_rate)
        FROM film)

--Find the movie with the shortest duration compared to the movie with the longest duration.
        SELECT title, length
        FROM film
        WHERE length <
        (SELECT MAX (length)
        FROM film)

--the manager want to grab the film title that have been returned on may 28 to 30--
        SELECT film_id, title
        FROM film
        WHERE film_id IN (SELECT inventory.film_id
        FROM rental
        INNER JOIN inventory
        ON inventory.inventory_id = rental.inventory_id
        WHERE return_date BETWEEN '2005-05-28' AND '2005-05-30')
        ORDER BY film_id

--Find customer who payment is greater than 11, search first name and last name--
--EXISTS operator is used to test the existence of any record in subquery--
--if the sub query is return TRUE the main query is evaluated--
        SELECT first_name, last_name
        FROM customer AS c
        WHERE EXISTS
        (SELECT *
        FROM payment AS p
        WHERE p.customer_id = c.customer_id AND amount >11 );

--Find customer that not made payment greater than 11, search first name and last name--
        SELECT first_name, last_name
        FROM customer AS c
        WHERE NOT EXISTS
        (SELECT *
        FROM payment AS p
        WHERE p.customer_id = c.customer_id AND amount >11);

--Find all the pairs of films that have the same length--
        SELECT f1.title, f2.title, f1.length
        FROM film AS f1
        INNER JOIN film AS f2
        ON f1.film_id != f2.film_id
        AND f1.length = f2.length;

--Find all the rows having emp_id as even number--
        SELECT *
        FROM dept_manager
        WHERE MOD(emp_id, 2) = 0;

----Find all the rows having emp_id as odd number--
        SELECT *
        FROM dept_manager
        WHERE MOD(emp_id, 2) <> 0;

--CHALLENGE--
--How can you produce a list of facilities that charge a fee to members?--
        SELECT *
        FROM cd.facilities
        WHERE membercost <> 0;

--CHALLENGE--
--You want to print out a list of all of the facilities and their cost to members. How would you retrieve a list of only facility names and costs?--
        SELECT name, membercost
        FROM cd.facilities;

--CHALLENGE--
--How can you produce a list of all facilities with the word 'Tennis' in their name?--
        SELECT *
        FROM cd.facilities
        WHERE name LIKE '%Tennis%';

--CHALLENGE--
--How can you produce an ordered list of the first 10 surnames in the members table? The list must not contain duplicates.--
        SELECT DISTINCT (surname)
        FROM cd.members
        ORDER BY surname
	LIMIT 10

--CHALLEGE--
--Produce a count of the number of facilities that have a cost to guests of 10 or more.--
        SELECT COUNT (*)
        FROM cd.facilities
        WHERE guestcost >= 10;

--CHALLEGE--
--Produce a list of the total number of slots booked per facility in the month of September 2012.--
--Produce an output table consisting of facility id and slots, sorted by the number of slots.--
        SELECT facid, SUM (slots) AS totalslots
        FROM cd.bookings
        WHERE starttime >= '2012-09-01' AND starttime <= '2012-10-01'
        GROUP BY facid
        ORDER BY SUM (slots)

--CHALLENGE--
--Produce a list of facilities with more than 1000 slots booked. Produce an output table consisting of facility id and total slots, sorted by facility id.--
        SELECT bookings.facid, SUM (slots) AS totalslots
        FROM cd.bookings AS bookings
        INNER JOIN cd.facilities AS facilities
        ON bookings.facid = facilities.facid
        GROUP BY bookings.facid
        HAVING SUM (slots) > 1000
        ORDER BY facid ASC;

--CHELLANGE--
--How can you produce a list of facilities that charge a fee to members, and that fee is less than 1/50th of the monthly maintenance cost?--
--Return the facid, facility name, member cost, and monthly maintenance of the facilities in question.--
        SELECT facid, name, membercost, monthlymaintenance membercost
        FROM cd.facilities
        WHERE membercost > 0 AND membercost < (monthlymaintenance/50.0);

        SELECT facid, name, membercost, monthlymaintenance membercost
        FROM cd.facilities
        WHERE membercost > 0 AND membercost < ((1/50.0) * monthlymaintenance);

--CHALLENGE--
--How can you retrieve the details of facilities with ID 1 and 5? Try to do it without using the OR operator.--
        SELECT *
        FROM cd.facilities
        WHERE facid = 1 OR facid = 5;

        SELECT *
        FROM cd.facilities
        WHERE facid IN (1,5);

--CHALLENGE--
--How can you produce a list of members who joined after the start of September 2012?--
--Return the memid, surname, firstname, and joindate of the members in question.--
        SELECT memid, surname, firstname, joindate
        FROM cd.members
        WHERE joindate >= '2012-09-01'

--CHALLENGE--
--You'd like to get the signup date of your last member. How can you retrieve this information?--
         SELECT MAX (joindate)
         FROM cd.members

         SELECT joindate
         FROM cd.members
         ORDER BY joindate DESC
         LIMIT 1

--CHALLENGE--
--How can you produce a list of the start times for bookings for tennis courts, for the date '2012-09-21'?--
--Return a list of start time and facility name pairings, ordered by the time.--
        SELECT cd.bookings.starttime AS start, cd.facilities.name
        FROM cd.bookings
        INNER JOIN cd.facilities
        ON cd.bookings.facid = cd.facilities.facid
        WHERE cd.facilities.name IN ('Tennis Court 1', 'Tennis Court 2')
        AND cd.bookings.starttime >= '2012-09-21'
        AND cd.bookings.starttime < '2012-09-22'

--CHALLENGE--
--How can you produce a list of the start times for bookings by members named 'David Farrell'?--
        SELECT cd.bookings.starttime AS start
        FROM cd.bookings
        INNER JOIN cd.members
        ON cd.members.memid = cd.bookings.memid
        WHERE cd.members.firstname = 'David'
        AND cd.members.surname = 'Farrell'

--Kevin malone make a mistake when looking at the AVG salary for salesman, then angela try to fix kevin malone problem--
	SELECT jobtitle, ROUND (AVG (salary),0)
	FROM employeedemographics
	INNER JOIN employeesalary
	ON employeedemographics.emp_id = employeesalary.emp_id
	WHERE jobtitle = 'Salesman'
	GROUP BY jobtitle

