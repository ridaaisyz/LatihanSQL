--SITUATION--
--We want to send out a promotional email to our existing cutomers--
        SELECT first_name, last_name, email
        FROM customer;

--How many different release_year do we have in the film database--
        SELECT DISTINCT (release_year)
        FROM film;

--How many unique rental rates do we have--
        SELECT DISTINCT (rental_rate)
        FROM film;

--CHALLENGE--
--We want to know what types of ratings we have in the database--
--what ratings do we have availabel?--
          SELECT DISTINCT (rating)
          FROM film;

--How many rows in the payment table--
          SELECT COUNT (*)
          FROM payment;

--How many ratings are there in the film table--
        SELECT COUNT(DISTINCT rating)
        FROM film;

--Want to know if there is a person with the first name is Mary that come to the store--
        SELECT *
        FROM customer
        WHERE first_name = 'Mary';

--Is there any rental rate that higher than $4--
        SELECT *
        FROM film
        WHERE rental_rate > 4;

SELECT *
FROM film
WHERE rental_rate > 4 AND replacement_cost >=15.99 AND rating = 'PG';

--Title of movie with conditions (AND)--
        SELECT title
        FROM film
        WHERE rental_rate > 4 AND replacement_cost >=15.99 AND rating = 'PG';

--Count title of movie with conditions--
        SELECT COUNT (title)
        FROM film
        WHERE rental_rate > 4 AND replacement_cost >=15.99 AND rating = 'PG';

--Title of movie with conditions (OR)--
        SELECT title
        FROM film
        WHERE rating = 'PG' or rating = 'R'

--Movie with the rating not equal to PG--
        SELECT *
        FROM film
        WHERE rating != 'PG'

--CHALLENGE--
-- A cutomer forgot their wallet at our store, so we need to track them down using their email to inform them--
--What is the email for the customer with the name Sharon Robinson?--
        SELECT email
        FROM customer
        WHERE first_name ='Sharon' and Last_name = 'Robinson';

--CHALLENGE--
-- A customer wants to know what the movie "Dragon Squad" is about--
--Could you give them the description for the movie "Dragon Squad" is about?--
        SELECT description
        FROM film
        WHERE title = 'Dragon Squad';

--CHALLENGE--
--A customer is late on their movie return, and we've mailed them a letter to their addresed at '259 Ipoh drive'. We should also called them on the phone them to let them know.--
--Can you get the phone number who lives at '259 Ipoh Drive'?--
        SELECT phone
        FROM address
        WHERE address = '259 Ipoh Drive'

--Order everything based of the order of store_id, first_name, last_name--
        SELECT store_id, first_name, last_name
        FROM customer
        ORDER BY store_id ASC, first_name ASC

--What were the 10 most recent payment based on payment_date--
        SELECT *
        FROM payment
        ORDER BY payment_date ASC
        LIMIT 10;

--What were the 10 most recent payment based on payment_date where there wa a monetory transaction--
        SELECT *
        FROM payment
        WHERE amount != 0.00
        ORDER BY payment_date ASC
        LIMIT 10;

--CHALLENGE--
--We want to rewards our first 10 paying customer--
--What are the customer ids of the first 10 customers who create a payment--
        SELECT customer_id
        FROM payment
        ORDER BY payment_date ASC
        LIMIT 10;

--CHALLENGE--
--A customer wants to quickly rent a video to watch over their short lunch break.--
--What are the title of the 5 shortest (in lenght of runtime) movies?--
        SELECT title, length
        FROM film
        ORDER BY length ASC
        LIMIT 5;

--CHALLENGE--
--If the previous customer can watch any movie that is 50 minute or less in a runtime, how many option does she have?--
        SELECT count (title)
        FROM film
        WHERE length <=50

--The actual amount of payment between 5 and 8 dollar--
        SELECT *
        FROM payment
        WHERE amount BETWEEN 5 and 8;

--How many the amount of payment between 5 and 8 dollar--
        SELECT COUNT (amount)
        FROM payment
        WHERE amount BETWEEN 5 and 8;

--Search actor name by first name (Anne, Carmen, Mena, Penelope)--
        SELECT *
        FROM actor
        WHERE first_name IN ('Anne', 'Carmen', 'Mena', 'Penelope');

--How many actor with the first name (Anne, Carmen, Mena, Penelope)--
        SELECT COUNT (first_name)
        FROM actor
        WHERE first_name IN ('Anne', 'Carmen', 'Mena', 'Penelope');

--Find all the the city that start with the letter B--
        SELECT *
        FROM city
        WHERE city LIKE 'B%'

--Find all the the city that NOT start with the letter B--
        SELECT *
        FROM city
        WHERE city NOT LIKE 'B%'

--CHALLENGE--
--How many payment transaction were greater than 5 dollar?--
        SELECT COUNT (amount)
        FROM payment
        WHERE amount > 5.00;

--CHALLENGE--
--How many actor have a first name with the letter P?--
        SELECT COUNT (actor)
        FROM actor
        WHERE first_name LIKE 'P%';

--CHALLENGE--
--How many unique disrict are our customers from--
        SELECT COUNT (DISTINCT (district))
        FROM address

--CHALLENGE--
--Retrive the list of names for those distinct district from the previous question--
        SELECT DISTINCT district
        FROM address

--CHALLENGE--
--How many films have a rating of R and a replecement cost between 5 and 15 dollar--
        SELECT COUNT (*)
        FROM film
        WHERE rating = 'R' AND replacement_cost BETWEEN 5 AND 15;

--CHALLENGE--
--How many films have the word Truman somewhere in the title--
        SELECT COUNT (title)
        FROM film
        WHERE title LIKE '%Truman%';

--Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.--
        SELECT DISTINCT city
        FROM station
        WHERE MOD (ID,2) = 0

--Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.--
        SELECT COUNT(city) - COUNT(DISTINCT city) 
        FROM station;

--Query the Name of any student in STUDENTS who scored higher than 75 Marks.--
--Order your output by the last three characters of each name.--
--If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.--
        SELECT name
        FROM students
        WHERE marks > 75
        ORDER BY right (name,3), ID ASC;

---Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months.-- 
--Sort your result by ascending employee_id.--
        SELECT name
        FROM employee
        WHERE salary > 2000 AND months < 10
        ORDER BY employee_id ASC;

--Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.--
        SELECT CITY 
        FROM STATION 
        WHERE SUBSTRING(CITY,1,1) 
        IN ('a','e','i','o','u');

--Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE RIGHT (city,1)
        IN ('a','e','i','o','u');

--Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters.--
--Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE RIGHT (city,1) IN ('a','e','i','o','u') and LEFT (city,1) IN ('a','e','i','o','u');

--Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE LEFT (city,1) NOT IN ('a','e','i','o','u');

--Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE RIGHT (city,1) NOT IN ('a','e','i','o','u');

--Query the list of CITY names from STATION that either do not start with vowels OR do not end with vowels. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE left (city,1) NOT IN ('a','e','i','o','u')
        OR right (city,1) NOT IN ('a','e','i','o','u')
        ORDER BY city

--Query the list of CITY names from STATION that do not start with vowels AND do not end with vowels. Your result cannot contain duplicates.--
        SELECT DISTINCT city
        FROM station
        WHERE left (city,1) NOT IN ('a','e','i','o','u')
        AND right (city,1) NOT IN ('a','e','i','o','u')
        ORDER BY city;

--Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name).--
--If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.--
        SELECT CITY, LENGTH(CITY)
        FROM STATION
        ORDER BY LENGTH(CITY) ASC, CITY LIMIT 1;
        
        SELECT CITY, LENGTH(CITY)
        FROM STATION
        ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1;

--What the minimum replacement cost in the film table--
        SELECT MIN (replacement_cost)
        FROM film;

--What the most replacement cost in the film table--
        SELECT MAX (replacement_cost)
        FROM film;

--What is the AVG replacement cost in the film table--
        SELECT avg (replacement_cost)
        FROM film;

--Cuman mau 2 desimal--
        SELECT ROUND (AVG (replacement_cost),2) 
        FROM film

--The store has to replace every single film, so  we were going to figure out the total replacement cost--
        SELECT SUM (replacement_cost)
        FROM film;

--What customer spending the most money in total--
        SELECT customer_id, SUM (amount)
        FROM payment
        GROUP BY customer_id
        ORDER BY SUM(amount);

--How many trascation that the customer having--
        SELECT customer_id, COUNT (amount)
        FROM payment
        GROUP BY customer_id
        ORDER BY COUNT(amount);

--Group BY customer_id and staff_id--
        SELECT customer_id, staff_id, SUM(amount)
        FROM payment
        GROUP BY customer_id, staff_id
        ORDER BY customer_id ASC;

--Gruop BY a date column and a total of sales--
        SELECT DATE (payment_date), SUM(amount)
        FROM payment
        GROUP BY DATE (payment_date)
        ORDER BY SUM(amount);

--CHALLENGE--
--We have two staff members, with staff IDS 1 and 2. We want to give a bonus to staff member that handle the most payments. (most in terms of number of payments proceeds, not the total dollars)--
--How many payments did each staff member handled and who got the bonus?--
        SELECT staff_id, COUNT (amount)
        FROM payment
        Group BY staff_id;

--CHALLENGE--
--Corporate HQ is conducting a study on relationship between replacement cost and a movie MPAA rating (e.g. G, PG, R, etc..)--
--What is the average replacement cost per  MPAA rating--
        SELECT rating, AVG (replacement_cost)
        FROM film
        GROUP BY rating;

--CHALLENGE--
--We are having a promotion to reward our top 5 customers with coupons.--
--What are the customers ids of the top 5 customers by total spend?--
        SELECT customer_id, SUM (amount)
        FROM payment
        GROUP BY customer_id
        ORDER BY SUM(amount) DESC
        LIMIT 5;

--Total SUM amount per customer pake HAVING--
        SELECT customer_id, SUM (amount)
        FROM payment
        GROUP BY customer_id
        HAVING SUM(amount) > 100.00;

--Number of customer per store--
        SELECT store_id, COUNT(customer_id)
        FROM customer
        GROUP BY store_id
        HAVING COUNT (customer_id) > 300;

--CHALLENGES--
--We are launching a platinum service for our most loyal customers. We will assign a platinum status to customers taht have had 40 or more transcation payment.--
--What customer_id are eligible for platinum status--
        SELECT customer_id, COUNT (amount)
        FROM payment
        GROUP BY customer_id
        HAVING COUNT (amount)>= 40;

--CHALLENGES--
--What are the customers ids of customers who has spent more than 100 dollar in our trasaction with our staff id member number 2--
        SELECT customer_id, SUM (amount)
        FROM payment
        WHERE staff_id = 2
        GROUP BY customer_id
        HAVING SUM(amount) > 100;

--ASSESMENT--
-- Return the customer IDs of customers who have spent at least $110 with the staff member who has an ID of 2.--
        SELECT customer_id, SUM(amount)
        FROM payment
        WHERE staff_id = 2
        GROUP BY customer_id
        HAVING SUM(amount) >=110

--ASSESMENT-
--How many films begin with the letter J?--
        SELECT COUNT(*)
        FROM film
        WHERE "title" LIKE 'J%'

--ASSESMENT--
-- What customer has the highest customer ID number whose name starts with an 'E' and has an address ID lower than 500?--
        SELECT first_name, last_name
        FROM customer
        WHERE "first_name" LIKE 'E%' AND address_id < 500
        ORDER BY customer_id DESC
        LIMIT 1;
